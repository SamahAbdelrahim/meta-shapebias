title = "pilot shape bias meta-analysis"
)
# Create a simple vector
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2
curve_inverted_u <- -x^2
curve_constant <- rep(5, length(x))  # A constant value of 5 for all elements
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(-30, 30), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2 + 20  # Adjusted constant
curve_inverted_u <- -x^2 + 20  # Adjusted constant
curve_constant <- rep(20, length(x))  # A constant value of 20 for all elements
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 40), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2 + 20  # Adjusted constant
curve_inverted_u <- -x^2 + 20  # Adjusted constant
curve_constant <- rep(20, length(x))  # A constant value of 20 for all elements
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 40), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
# Create a simple vector
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2 + 20  # Adjusted constant
curve_inverted_u <- -x^2 + 20  # Adjusted constant
curve_constant <- rep(20, length(x))  # A constant value of 20 for all elements
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 40), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
# Add a legend
legend("topright", legend = c("U Shape", "Inverted U Shape", "Constant"), col = c("blue", "red", "green"), lty = 1)
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2 + 20  # Adjusted constant
curve_inverted_u <- -x^2 + 20  # Adjusted constant
curve_constant <- rep(20, length(x))  # A constant value of 20 for all elements
# Calculate the lowest points
min_u <- min(curve_u)
min_inverted_u <- min(curve_inverted_u)
diff <- min_inverted_u - min_u
# Adjust the U shape curve to align the lowest points
curve_u <- curve_u + diff
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 40), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2 + 20  # Adjusted constant
curve_inverted_u <- -x^2 + 20  # Adjusted constant
curve_constant <- rep(20, length(x))  # A constant value of 20 for all elements
# Calculate the lowest points
min_u <- min(curve_u)
min_inverted_u <- min(curve_inverted_u)
diff <- min_inverted_u - min_u
# Adjust the U shape curve to align the lowest points
curve_u <- curve_u + diff
# Get the maximum value for ylim
max_y <- max(c(curve_u, curve_inverted_u, curve_constant))
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, max_y), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2
curve_inverted_u <- -x^2 + 25  # Adjusted constant to range from 0 to 25
curve_constant <- rep(25, length(x))  # A constant value of 25 for all elements
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 25), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
# Create a simple vector
x <- seq(-5, 5, length.out = 100)
# Generate three curves
curve_u <- x^2
curve_inverted_u <- -x^2 + 25  # Adjusted constant to range from 0 to 25
curve_constant <- rep(15, length(x))  # Adjusted constant to be at 15
# Plot the curves
plot(x, curve_u, type = "l", col = "blue", ylim = c(0, 25), xlab = "X", ylab = "Y", main = "Three Curves")
lines(x, curve_inverted_u, col = "red")
lines(x, curve_constant, col = "green")
knitr::opts_chunk$set(echo = TRUE)
# additional libraries
library("knitr")
library("janitor")
library("broom.mixed")
library("lme4")
library("emmeans")
library("tidyverse")
library("kableExtra")
library("modelr")
library("broom")
library("nlme")
library(wesanderson)
library("meta")
library("metafor")
# library("dmetar")
library(jtools) # Load jtools
theme_set(theme_bw())
# reading the data file
pilot1_data = read_csv("252.csv")
df_shape= filter(pilot1_data, !is.na(d))
# pilot1_data = pilot1_data %>%
#   select(ID, Title, d, d_var, Author)
# df_shape_summary = df_shape %>%
#   group_by(ID, Title, Author) %>%
#   summarize(mean = mean(d),
#             mean_se = mean(d_var))
df_shape_summary <- df_shape %>%
group_by(language) %>%
summarize( count = n())
df_shape$englishgrp <- fct_relevel(as.factor(df_shape$language %in%
c("english")),
"TRUE")
df_shape$mean_age_months_centered36 <- df_shape$mean_age_months - 36
df_shape$log_mean_age_months <- log(df_shape$mean_age_months)
df_shape$indoeuropean <- fct_relevel(as.factor(df_shape$language %in%
c("english","spanish", "german")),
"TRUE")
df_shape_indo <- df_shape %>%
filter(indoeuropean == TRUE)
df_shape_nonendo <- df_shape %>%
filter(indoeuropean == FALSE)
df_shape_solid <- df_shape %>% filter(solid != "substance")
# creating a plot that shows the effects sizes colored per language group as well as the polynomial regression curve that fits it.
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = indoeuropean)) + geom_point(aes(ymin = d - d_var, ymax = d + d_var,
alpha = .5, size = part_num)) +
geom_smooth(aes(group = indoeuropean,
lty  = indoeuropean),
col = "black",
method = "lm", se = TRUE,
formula = y ~ poly(x,2)) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)") +
scale_color_discrete(name = "Indo-Euro language") +
scale_linetype_discrete(name = "Indo-European") +
theme(legend.position = "bottom") +
theme_classic(base_size = 8)
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = language))+
geom_pointrange(aes(ymin = d - d_var, ymax = d + d_var),
alpha = .5, size = 0.3) +
geom_smooth(aes(group = indoeuropean,
lty  = indoeuropean),
col = "black",
method = "lm", se = TRUE,
formula = y ~ poly(x,2)) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)") +
scale_color_discrete(name = "Language") +
scale_linetype_discrete(name = "Indo-European") +
theme(legend.position = "bottom") +
theme_classic(base_size = 8)
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = language))+
geom_pointrange(aes(ymin = d - d_var, ymax = d + d_var),
alpha = .5, size = 0.3) +
geom_smooth(aes(group = indoeuropean,
lty  = indoeuropean),
col = "black",
method = "lm", se = TRUE,
formula = y ~ x) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)") +
scale_color_discrete(name = "Language") +
scale_linetype_discrete(name = "Indo-European") +
theme(legend.position = "bottom") +
theme_classic(base_size = 8)
# ggsave("first graph.png", width = 7, height = 4)
barplot(table(df_shape$language), main = "barplot")
length(which(df_shape$language=="english"))
ggplot(df_shape_summary, aes(x = language, y = count)) +
geom_col(aes(color = language), ) +
theme(legend.position = "none")  +
geom_text(aes(label = count), vjust = -0.2)
# creating a plot that shows the effects sizes colored per language group as well as the polynomial regression curve that fits it.
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = language))+
geom_pointrange(aes(ymin = d - d_var, ymax = d + d_var),
alpha = .5) +
geom_smooth(aes(group = englishgrp,
lty  = englishgrp),
col = "black",
method = "lm", se = FALSE,
formula = y ~ poly(x,2)) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)") +
scale_color_discrete(name = "Language") +
scale_linetype_discrete(name = "English") +
theme(legend.position = "bottom") +
theme_minimal(base_size = 8)
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = language)) +
geom_point(aes(ymin = d - d_var, ymax = d + d_var,
alpha = .5, size = part_num))  +
geom_smooth(data = filter(df_shape, language == "chinese"),
col = "black",
method = "lm", se = FALSE) +
geom_smooth(data = filter(df_shape, language == "english"),
col = "black",
method = "lm", se = FALSE)
m.gen <- metagen( TE= d,
seTE = d_var,
studlab = ID,
data = df_shape,
sm = "SMD",
fixed = FALSE,
random = TRUE,
method.tau = "REML",
hakn = TRUE,
title = "pilot shape bias meta-analysis"
)
# summary(m.gen)['TE']
# m.gen["TE.fixed"]
# m.gen["TE.random"]
# m.gen["w.random"]
m.gen_solid <- metagen( TE= d,
seTE = d_var,
studlab = ID,
data = df_shape_solid,
sm = "SMD",
fixed = FALSE,
random = TRUE,
method.tau = "REML",
hakn = TRUE,
title = "pilot shape bias meta-analysis")
forextobj <- forest.meta(m.gen,
sortvar = TE,
prediction = TRUE,
print.tau2 = FALSE,
leftlabs = c("Author", "g", "SE"))
mod <- rma.mv(yi = d,
V = d_var,
random = ~ 1 | ID,
slab = short_cite,
data = df_shape)
summary(mod)
mod_nested <- rma.mv(yi = d,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num)))
summary(mod_nested)
forest(mod) +
theme_minimal(base_size = 8)
ggplot(df_shape, aes(x = short_cite, y = d,
ymin=d-sqrt(d_var)*1.96,
ymax=d+sqrt(d_var)*1.96)) +
geom_pointrange( alpha = .5, position=position_dodge2(width=.5)) +
coord_flip() +
geom_hline(yintercept = 0, lty = 2) +
geom_hline(data = m.gen ,yintercept = m.gen$TE.random, color = "red") +
aes(x=reorder(short_cite,-d, sum)) +
ylab("Standardized Mean Difference (d)") +
xlab("Citation") +
theme_minimal(base_size = 8)
#+geom_text(aes(1.5,m.gen$TE.random,label = round(m.gen$TE.random,2), color = "darkred", size = 0.01 ))
ggplot(df_shape, aes(x = short_cite, y = d,
ymin=d-sqrt(d_var)*1.96,
ymax=d+sqrt(d_var)*1.96)) +
geom_pointrange(aes(color=indoeuropean), alpha = .5, position=position_dodge2(width=.5)) +
coord_flip() +
geom_hline(yintercept = 0, lty = 2) +
geom_hline(data = m.gen ,yintercept = m.gen$TE.random) +
aes(x=reorder(short_cite,-d, sum)) +
ylab("Standardized Mean Difference (d)") +
xlab("Citation") +
theme_minimal(base_size = 8)
#png("secondgraph.png")
ggplot(df_shape, aes(x = short_cite, y = d,
ymin=d-sqrt(d_var)*1.96,
ymax=d+sqrt(d_var)*1.96)) +
geom_pointrange(aes(color=solid), alpha = .5, position=position_dodge2(width=.5)) +
coord_flip() +
geom_hline(yintercept = 0, lty = 2) +
geom_hline(data = m.gen ,yintercept = m.gen$TE.random) +
aes(x=reorder(short_cite,-d, sum)) +
ylab("Standardized Mean Difference (d)") +
xlab("Citation") +
theme_minimal(base_size = 8)
ggplot(df_shape, aes(x = short_cite, y = d,
ymin=d-sqrt(d_var)*1.96,
ymax=d+sqrt(d_var)*1.96)) +
geom_pointrange(aes(color=solidity), alpha = .5, position=position_dodge2(width=.5)) +
coord_flip() +
geom_hline(yintercept = 0, lty = 2) +
geom_hline(data = m.gen ,yintercept = m.gen$TE.random) +
aes(x=reorder(short_cite,-d, sum)) +
ylab("Standardized Mean Difference (d)") +
xlab("Citation") +
theme_minimal(base_size = 8)
#png("secondgraph.png")
## only solidity:
ggplot(df_shape_solid, aes(x = short_cite, y = d,
ymin=d-sqrt(d_var)*1.96,
ymax=d+sqrt(d_var)*1.96)) +
geom_pointrange(aes(color=solidity), alpha = .5, position=position_dodge2(width=.5)) +
coord_flip() +
geom_hline(yintercept = 0, lty = 2) +
geom_hline(data = m.gen ,yintercept = m.gen_solid$TE.random) +
aes(x=reorder(short_cite,-d, sum)) +
ylab("Standardized Mean Difference (d)") +
xlab("Citation") +
theme_minimal(base_size = 8)
m.gen_solid
m.gen
col.contour = c("gray75", "gray85", "gray95")
funnel(m.gen,
comb.random = TRUE,
xlim = c(-2, 4),
contour = c(0.9, 0.95, 0.99),
col.contour = col.contour)
regtest(x = d, vi = d_var,
data = df_shape)
# Add a legend
legend(x = 3.3, y = 0.1, cex = 0.5,
legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
fill = col.contour)
#png("funnel.png")
x = summary(m.gen)['TE']
y = summary(m.gen)['seTE']
m.gen["TE.fixed"]
ter = m.gen["TE.random"]
data.gen = data.frame(x,y,ter)
ggplot(data = data.gen, mapping = aes(x=TE, y = seTE, color= )) +
geom_point() +
geom_vline(xintercept = 0.4418062) +
scale_y_reverse()
ggplot(data = df_shape, mapping = aes(x=d, y = d_var, color= indoeuropean)) +
geom_point() +
geom_vline(xintercept = 0.5401759) +
scale_y_reverse()
ggplot(data = df_shape, mapping = aes(x=d, y = d_var, color= language)) +
geom_point() +
geom_vline(xintercept = 0.5401759) +
scale_y_reverse() +
geom_smooth(method = "lm")
m.gen$data %>%
mutate(y = m.gen$TE/m.gen$seTE, x = 1/m.gen$seTE) %>%
lm(y ~ x, data= .) %>%
summary()
#eggers regression
ggplot(data = data.gen, mapping = aes(x=1/seTE, y = TE/seTE, color= )) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = df_shape, mapping = aes(x=d_var, y = d/d_var, color= indoeuropean)) +
geom_point() +
geom_smooth(method = "lm")
# eggers.test(m.gen)
mod <- rma.mv(yi = d,
V = d_var,
random = ~ 1 | ID,
slab = short_cite,
data = df_shape)
mod_nested <- rma.mv(yi = d,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num)))
summary(mod)
summary(mod_nested)
# using the meta and metafor packages to analyze meta-analysis effect sizes
mod_intercept <- rma.mv(d ~ 1,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape, !is.na(exp_num)))
mod_intercept_nonindo <- rma.mv(d ~ 1,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_nonendo, !is.na(exp_num)))
mod_intercept_indo <- rma.mv(d ~ 1,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_indo, !is.na(exp_num)))
summary(mod_intercept_nonindo)
summary(mod_intercept)
mod_age_nonindo <- rma.mv(d ~ mean_age_months_centered36,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_nonendo, !is.na(exp_num)))
mod_age_indo <- rma.mv(d ~ mean_age_months_centered36,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_indo, !is.na(exp_num)))
summary(mod_age_nonindo)
summary(mod_age_indo)
mod_log_age_nonindo <- rma.mv(d ~ log_mean_age_months,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_nonendo, !is.na(log_mean_age_months) , !is.na(exp_num)))
mod_log_age_indo <- rma.mv(d ~ log_mean_age_months,
V = d_var,
random = ~1 | as.factor(Title) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_indo, !is.na(log_mean_age_months) , !is.na(exp_num)))
summary(mod_log_age_nonindo)
summary(mod_log_age_indo)
ggplot(df_shape,
aes(x = mean_age_months, y = d, color = language))+
geom_pointrange(aes(ymin = d - d_var, ymax = d + d_var),
alpha = .5) +
geom_smooth(aes(group = 1),
col = "black",
method = "lm", se = FALSE,
formula = y ~ log(x)) +
geom_smooth(aes(group = 1),
col = "red",
method = "lm", se = FALSE,
formula = y ~ poly(x,2)) +
geom_smooth(aes(group = 1),
col = "blue",
method = "lm", se = FALSE,
formula = y ~ x) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)") +
scale_color_discrete(name = "Language") +
scale_linetype_discrete(name = "Indo-European") +
theme(legend.position = "bottom") +
xlim(0,80)
ggplot(df_shape,
aes(x = mean_age_months, y = d))+
geom_smooth(aes(group = 1),
col = "black",
method = "lm", se = FALSE,
formula = y ~ log(x), show.legend = TRUE) +
geom_smooth(aes(group = 1),
col = "red",
method = "lm", se = FALSE,
formula = y ~ poly(x,2)) +
geom_smooth(aes(group = 1),
col = "blue",
method = "lm", se = FALSE,
formula = y ~ x) +
geom_hline(yintercept = 0, lty = 3) +
ylab("Standardized Mean Difference (d)") +
xlab("Mean age (months)")
mod_poly_nonindo <- rma.mv(d ~ mean_age_months_centered36 + I(mean_age_months_centered36^2),
V = d_var,
random = ~1 | as.factor(ID) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_nonendo, !is.na(log_mean_age_months), !is.na(exp_num)))
mod_poly_indo <- rma.mv(d ~ mean_age_months_centered36 + I(mean_age_months_centered36^2),
V = d_var,
random = ~1 | as.factor(ID) /
as.factor(exp_num),
slab = Title,
data = filter(df_shape_indo, !is.na(log_mean_age_months), !is.na(exp_num)))
summary(mod_poly_nonindo)
summary(mod_poly_indo)
rma.mv(d ~ mean_age_months_centered36 * indoeuropean +
I(mean_age_months_centered36^2) * indoeuropean,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
rma.mv(d ~ mean_age_months_centered36 * indoeuropean ,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
rma.mv(d ~ mean_age_months_centered36 * indoeuropean + Informative_syntax ,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
rma.mv(d ~ mean_age_months_centered36 * Informative_syntax ,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
rma.mv(d ~ mean_age_months_centered36 * solidity ,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
rma.mv(d ~ mean_age_months_centered36 + solidity * Informative_syntax,
V = d_var,
random = ~ 1 | ID/exp_num,
slab = short_cite,
data = filter(df_shape, !is.na(exp_num), !is.na(language)))
